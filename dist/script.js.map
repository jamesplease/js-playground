{"version":3,"sources":["script.js"],"names":[],"mappings":";;;;;;;;AAAA,AAAC,CAAA,UAAU,MAAM,EAAE,OAAO,EAAE;AAC1B,SAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC,GAChJ,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,QAAQ,EAAE,YAAY,EAAE,qBAAqB,CAAC,EAAE,OAAO,CAAC,GAC7G,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAA;CACvC,CAAA,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;AAAE,cAAY,CAAC;;;AAGzC,MAAI,MAAM,GAAG,SAAT,MAAM,CAAY,GAAG,EAAE;AACzB,WAAO,GAAG,GAAG,CAAC,CAAC;GAChB,CAAC;;;;;AAKF,MAAI,YAAY,GAAG,SAAf,YAAY,CAAG,GAAG;WAAI,GAAG,GAAG,CAAC;GAAA,CAAC;;;;AAIlC,MAAI,eAAe,GAAG,SAAlB,eAAe,CAAG,GAAG,EAAI;AAC3B,OAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACd,WAAO,GAAG,CAAC;GACZ,CAAC;;;;;AAKF,MAAI,kBAAkB,GAAG,SAArB,kBAAkB,CAAI,GAAG;QAAE,SAAS,gCAAG,CAAC;WAAK,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC;GAAA,CAAC;;;;;AAKxE,MAAI,aAAa,GAAG,SAAhB,aAAa;QAAI,GAAG,gCAAG,CAAC;WAAK,GAAG,GAAG,CAAC;GAAA,CAAC;;;;;;;;AAQzC,MAAI,KAAK,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AACpC,MAAI,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI;WAAI,IAAI,CAAC,WAAW,EAAE;GAAA,CAAC,CAAC;;;MAGrD,UAAU;;;;;;AAKH,aALP,UAAU,GAKA;4BALV,UAAU;;;;AASZ,iCATE,UAAU,6CASJ;KACT;;cAVG,UAAU;;iBAAV,UAAU;;;;aAaD,yBAAG;AACd,YAAI,YAAY,8BAdd,UAAU,8CAc4B,CAAC;AACzC,oBAAY,CAAC,IAAI,GAAG,aAAa,CAAC;AAClC,eAAO,YAAY,CAAC;OACrB;;;;;;;;;;;WASW,YAAG;AACb,eAAO,CAAC,CAAC,QAAQ,CAAC,uCAAuC,CAAC,CAAC;OAC5D;;;;;;aAIc,oBAAG;AAChB,eAAO,cAAc,CAAC;OACvB;;;WAlCG,UAAU;KAAS,EAAE,CAAC,QAAQ;;AAqCpC,MAAI,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;;;AAGlC,YAAU,CAAC,MAAM,EAAE,CAAC;AACpB,GAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;CAwCjC,CAAC,CAAE","file":"script.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery'), require('underscore'), require('backbone.marionette')) :\n  typeof define === 'function' && define.amd ? define(['jquery', 'underscore', 'backbone.marionette'], factory) :\n  factory(global.$, global._, global.Mn)\n}(this, function ($, _, Mn) { 'use strict';\n\n  // Consider the following method...\n  var addTwo = function(num) {\n    return num + 2;\n  };\n  // console.log('Adding two:', addTwo(4));\n\n  // With arrow functions, we can rewrite this\n  // to be a single line.\n  var addTwoSimple = num => num + 2;\n  // console.log('Also adding two:', addTwo(4));\n\n  // For multiline methods, you'll need to add brackets and a `return` statement.\n  var addTwoMultiline = num => {\n    num = num + 2;\n    return num;\n  };\n  // console.log('Adding two multiline', addTwoMultiline(4));\n\n  // If you have more than one argument, you'll need parantheses. In this\n  // example, we set a default value for the precision\n  var setNumberPrecision = (num, precision = 2) => num.toFixed(precision);\n  // console.log('Precision:', setNumberPrecision(4));\n\n  // Default params also work for single-argument methods, but you'll need to\n  // add the parentheses.\n  var increaseByTwo = (num = 2) => num + 2;\n  // console.log('Increase by two:', increaseByTwo());\n\n  // ------------------------------------------------------------------------------------------------\n\n  // All of this is fine and good, but these are *particularly* awesome\n  // when doing functional-style programming.\n\n  var names = ['James', 'Sue', 'Sam'];\n  var lowercaseNames = names.map(name => name.toLowerCase());\n  // console.log('Lowercase names', lowercaseNames);\n\n  class CustomView extends Mn.ItemView {\n\n    // super can be used to call the original CustomView's constructor\n    // This is substantially prettier than the alternative:\n    // `Mn.ItemView.prototype.constructor.apply(this, arguments);`\n    constructor() {\n      \n      // ...do some custom stuff here...\n\n      super();\n    }\n    \n    // Super can also be used to get individual class methods. Neato.\n    serializeData() {\n      var originalData = super.serializeData();\n      originalData.name = 'Custom View';\n      return originalData;\n    }\n\n    // Unfortunately, ES6 does not provide a way to set properties\n    // on the prototype nor instance. Consequently, we can't just set\n    // a template property as we normally might.\n    // As a workaround, we can use getters and setters, as in the following\n    // example, where I specify the template.\n    // This limitation is the primary reason why many people will not choose\n    // to use ES6 classes, I imagine.\n    get template() {\n      return _.template('<%- name %> â€“ Testing out ES6 Classes');\n    }\n\n    // We can, however, place static methods.\n    // This will be accessed via `CustomView.whatever()`\n    static whatever() {\n      return 'Yes you can!';\n    }\n  }\n\n  var customView = new CustomView();\n\n  // We render it and attach it to the body.\n  customView.render();\n  $('body').append(customView.el);\n\n  // Log the result of the static method\n  // console.log('Can I execute a static method?', CustomView.whatever());\n\n\n\n\n\n\n\n\n\n  // // need to construct a String object explicitly to avoid auto-boxing\n  // var someString = new String('hi');\n\n  // someString[Symbol.iterator] = function() {\n  //   return {\n  //     next: function() {\n  //       if (this._first) {\n  //         this._first = false;\n  //         return {value: 'bye', done: false};\n  //       } else {\n  //         return {done: true};\n  //       }\n  //     },\n  //     _first: true\n  //   };\n  // };\n\n  // console.log('what hello', [...someString]);\n\n\n\n\n\n\n\n\n\n}));\n"],"sourceRoot":"/source/"}