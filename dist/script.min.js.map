{"version":3,"sources":["script.min.js","/source/script.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_get","_x","_x2","_x3","_again","object","property","receiver","desc","parent","getter","undefined","getOwnPropertyDescriptor","get","call","getPrototypeOf","global","factory","exports","module","require","define","amd","$","_","Mn","this","CustomView","_Mn$ItemView","originalData","name","template","ItemView","customView","render","append","el"],"mappings":"AAIA,QAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,WAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIH,WAAU,iEAAoEG,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYD,EAASU,UAAYT,GAN3Z,GAAIU,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWV,WAAaU,EAAWV,aAAc,EAAOU,EAAWR,cAAe,EAAU,SAAWQ,KAAYA,EAAWT,UAAW,GAAML,OAAOe,eAAeL,EAAQI,EAAWE,IAAKF,IAAiB,MAAO,UAAUpB,EAAauB,EAAYC,GAAiJ,MAA9HD,IAAYR,EAAiBf,EAAYK,UAAWkB,GAAiBC,GAAaT,EAAiBf,EAAawB,GAAqBxB,MAE7hByB,KAAO,SAAaC,EAAIC,EAAKC,GAAqC,IAA9B,GAAIC,IAAS,EAAwBA,GAAQ,CAAE,GAAIC,GAASJ,EAAIK,EAAWJ,EAAKK,EAAWJ,CAAKK,GAAOC,EAASC,EAASC,OAAWP,GAAS,CAAO,IAAII,GAAO3B,OAAO+B,yBAAyBP,EAAQC,EAAW,IAAaK,SAATH,EAAJ,CAAiN,GAAI,SAAWA,GAAQ,MAAOA,GAAKxB,KAAgB,IAAI0B,GAASF,EAAKK,GAAK,OAAeF,UAAXD,EAA+BC,OAAoBD,EAAOI,KAAKP,GAApU,GAAIE,GAAS5B,OAAOkC,eAAeV,EAAS,IAAe,OAAXI,EAAmB,MAAOE,OAAoBV,GAAKQ,EAAQP,EAAMI,EAAUH,EAAMI,EAAUH,GAAS,KCFva,SAAUY,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBF,EAAQG,QAAQ,UAAWA,QAAQ,cAAeA,QAAQ,wBACvG,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,SAAU,aAAc,uBAAwBJ,GACrGA,EAAQD,EAAOO,EAAGP,EAAOQ,EAAGR,EAAOS,KACnCC,KAAM,SAAUH,EAAGC,EAAGC,GAAM,YDS5B,ICPME,GAAU,SAAAC,GAKH,QALPD,KDcFtD,gBAAgBqD,KCddC,GASF3B,KAAAnB,OAAAkC,eATEY,EAAU/C,WAAA,cAAA8C,MAAAZ,KAAAY,MDuDd,MAlCAjD,WCrBIkD,EAAUC,GDuBdvC,aCvBIsC,IDwBF9B,IAAK,gBAGLb,MCdW,WACX,GAAI6C,GAAY7B,KAAAnB,OAAAkC,eAddY,EAAU/C,WAAA,gBAAA8C,MAAAZ,KAAAY,KAgBZ,OADAG,GAAaC,KAAO,cACbD,KDiBPhC,IAAK,WASLgB,IChBU,WACV,MAAOW,GAAEO,SAAS,8CDmBlBlC,IAAK,WAILb,MClBa,WACb,MAAO,mBAjCL2C,GAAmBF,EAAGO,UAqCxBC,EAAa,GAAIN,EAGrBM,GAAWC,SACXX,EAAE,QAAQY,OAAOF,EAAWG","file":"script.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('jquery'), require('underscore'), require('backbone.marionette')) :\n  typeof define === 'function' && define.amd ? define(['jquery', 'underscore', 'backbone.marionette'], factory) :\n  factory(global.$, global._, global.Mn)\n}(this, function ($, _, Mn) { 'use strict';\n\n  class CustomView extends Mn.ItemView {\n\n    // super can be used to call the original CustomView's constructor\n    // This is substantially prettier than the alternative:\n    // `Mn.ItemView.prototype.constructor.apply(this, arguments);`\n    constructor() {\n      \n      // ...do some custom stuff here...\n\n      super();\n    }\n    \n    // Super can also be used to get individual class methods. Neato.\n    serializeData() {\n      var originalData = super.serializeData();\n      originalData.name = 'Custom View';\n      return originalData;\n    }\n\n    // Unfortunately, ES6 does not provide a way to set properties\n    // on the prototype nor instance. Consequently, we can't just set\n    // a template property as we normally might.\n    // As a workaround, we can use getters and setters, as in the following\n    // example, where I specify the template.\n    // This limitation is the primary reason why many people will not choose\n    // to use ES6 classes, I imagine.\n    get template() {\n      return _.template('<%- name %> â€“ Testing out ES6 Classes');\n    }\n\n    // We can, however, place static methods.\n    // This will be accessed via `CustomView.whatever()`\n    static whatever() {\n      return 'Yes you can!';\n    }\n  }\n\n  var customView = new CustomView();\n\n  // We render it and attach it to the body.\n  customView.render();\n  $('body').append(customView.el);\n\n  // Log the result of the static method\n  // console.log('Can I execute a static method?', CustomView.whatever());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}));\n"],"sourceRoot":"/source/"}